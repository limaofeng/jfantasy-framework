schema:
  typeDefs: "./schema.graphql"

scalars:
  - name: "File"
    description: "A file part in a multipart request"
  - name: "Upload"
    description: "A file part in a multipart request"

services:
  - name: asany
    url: "https://api.asany.cn/graphql"
    typeDefs: "./asany.graphql"
    introspection:
      enabled: false
      frequency: 30m
    excludeFields:
      - "Application.routespaces"

override:
  - type: "Query"
    fields:
      - name: "apps"
        mapping: "applications"
        arguments:
          - name: "filter"
            mapping: "where"
  - type: "Application"
    fields:
      - name: "appName"
        mapping: "name"
        dataFetcher: "appName"
  - type: "Storage"
    fields:
      - name: "createdBy"
        type: "User"
        resolve: "user(id: $createdBy)"
  - type: "ClientSecret"
    fields:
      - name: "type"
        type: "Dict"
        resolve: 'dict(code: $type, type: "client_type")'

dataFetchers:
  - name: "appName"
    class: "net.asany.jfantasy.graphql.gateway.AppNameDataFetcher"

directives:
  - name: "myDirective"
    description: "A simple directive"
    repeatable: true
    locations:
      - "FIELD_DEFINITION"
      - "FIELD"
    arguments:
      - name: "arg1"
        type: "String"
        description: "A simple argument"
    handler: "net.asany.jfantasy.graphql.gateway.MyDirective"

security:
  authentication:
    enabled: true
    providers:
      apikey:
        enabled: true
        provider: "net.asany.jfantasy.graphql.gateway.ApiKeyAuthenticationProvider"
      iam:
        enabled: true
        provider: "net.asany.jfantasy.graphql.gateway.IamAuthenticationProvider"

  authorization:
    enabled: true
    mode: "RBAC"
    policy: "./auth-policy.yaml"

logging:
  level: INFO
  format: json

caching:
  enabled: true
  ttl: 300

monitoring:
  enabled: true
  endpoint: "/metrics"

dataLoaders:
  - name: "applications"
    class: "net.asany.jfantasy.graphql.gateway.ApplicationDataLoader"
    options:
      cache: true
      batch: true

rewriteFields:
  - field: "User.addUser"
    definition: "addUser(input: EnhancedUserInput): EnhancedUser"
    delegate:
      name: getUser
      args:
        id: "$.id"

delegates:
  - name: getUser
    resolver: "./getUser.js"

rewriteRules:
  - match:
      queryName: "getUser"
    rewrite:
      toService: "userService"
      modifyQuery: "replaceUserIdWithUsername"

  - match:
      queryName: "getOrder"
    rewrite:
      toService: "orderService"
      modifyQuery: "addOrderDetails"

forwardingRules:
  - match:
      queryName: "getUser"
    forwardTo: "userService"