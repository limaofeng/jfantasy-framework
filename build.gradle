import org.gradle.plugins.ide.eclipse.model.SourceFolder

plugins {
    id 'java'
    id 'jacoco'
    id "io.spring.dependency-management" version "${PLUGIN_SPRING_DEPENDENCY_MANAGEMENT_VER}"
    id 'com.github.kt3k.coveralls' version "${PLUGIN_KT3K_COVERALLS_VER}"
    id "com.star-zero.gradle.githook" version "${PLUGIN_GIT_HOOK_VER}"
    id "ru.netris.commitlint" version "${PLUGIN_COMMITLINT_VER}"
    id "com.diffplug.spotless" version "${PLUGIN_SPOTLESS_VER}"
    id "com.diffplug.eclipse.apt" version "${PLUGIN_ECLIPSE_APT_VER}"
}

githook {
    failOnMissingHooksDir = false
    createHooksDirIfNotExist = false
    hooks {
        "commit-msg" {
            task = "commitlint -Dmsgfile=\$1"
        }
        "pre-commit" {
            shell = "sh ./gradle/spotless.sh"
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: "com.diffplug.eclipse.apt"

    group = 'cn.asany.chaos'
    version = System.getenv().getOrDefault('RELEASE_VERSION', 'v0.0.0').replaceAll(/^v/, "")
    status = 'integration'

    idea {
        module {
            outputDir file("$buildDir/classes/java/main")
            testOutputDir file("$buildDir/classes/java/test")
            inheritOutputDirs = false
        }
    }

    eclipse {
        jdt {
            apt {
                genSrcDir = file('build/generated/sources/annotationProcessor/java/main')
                genTestSrcDir = file('build/generated_tests')
            }
        }
        classpath {
            file.beforeMerged { cp -> cp.entries.add(new SourceFolder('build/generated/sources/annotationProcessor/java/main/', null))
            }
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        implementation "jakarta.interceptor:jakarta.interceptor-api:${LIB_JAKARTA_INTERCEPTOR_API_VER}"
    }
}

subprojects {
    apply from: "$rootDir/gradle/dependencies.gradle"
    apply from: "$rootDir/gradle/spotless.gradle"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    compileJava.dependsOn(processResources)

    manifest {
        attributes 'provider': 'gradle'
    }

    javadoc {
        options.tags = ["date"]
        options.addStringOption("charset", "UTF-8")
        if (JavaVersion.current().isJava8Compatible()) {
            options.addBooleanOption('Xdoclint:none', true)
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${LIB_SPRING_BOOT_VER}"
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()

        ignoreFailures = true
    }

    tasks.register('javadocJar', Jar) {
        archiveClassifier.set("javadoc")
        from javadoc
    }

    tasks.register('sourceJar', Jar) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    tasks.register('copyDependencies', Sync) {
        from configurations.compileClasspath
        from configurations.testCompileClasspath
        into 'build/dependencies'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourceJar
                artifact javadocJar

                pom {
                    name = 'jFantasy-Framework'
                    description = 'SpringBoot + JPA + GraphQL'
                    url = 'https://github.com/limaofeng/jfantasy-framework'
                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://raw.githubusercontent.com/limaofeng/jfantasy-framework/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'limaofeng'
                            name = '李茂峰'
                            email = 'limaofeng@msn.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://git@github.com:limaofeng/jfantasy-framework.git'
                        developerConnection = 'scm:git:ssh://git@github.com:limaofeng/jfantasy-framework.git'
                        url = 'https://github.com/limaofeng/jfantasy-framework'
                    }
                }
            }
        }

        repositories {
            maven {
                if (project.hasProperty('snapshots')) {
                    url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

}

tasks.register("codeCoverageReport", JacocoReport) {
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                //noinspection GroovyAssignabilityCheck
                sourceSets subproject.sourceSets.main
                //noinspection GroovyAssignabilityCheck
                executionData(testTask)
            }
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    reports {
        xml.enabled true
        html.enabled false
        xml.destination file("${buildDir}/reports/Coverage.xml")
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath 'build/reports/Coverage.xml'
}