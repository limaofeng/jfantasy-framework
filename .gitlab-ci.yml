stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: registry.cn-hangzhou.aliyuncs.com/limaofeng/gradle-alpine
  cache:
    paths:
    - $GRADLE_USER_HOME/caches/
    - $GRADLE_USER_HOME/wrapper/
    - $GRADLE_USER_HOME/build-cache/
  variables:
    GRADLE_USER_HOME: /cache/.gradle
  script:
    - ./gradlew clean classes -x test

#sonar:
#  stage: test
#  image: limaofeng/gradle-alpine:mysql
#  services:
#    - mysql:latest
#  variables:
#    MYSQL_ROOT_PASSWORD: 123456
#    DATABASE_HOST: mysql
#    DATABASE_USERNAME: root
#    DATABASE_PASSWORD: 123456
#  before_script:
#    - export GRADLE_USER_HOME=/cache/.gradle
#  script:
#    - mysql -h mysql -u root -p123456 < "core/database/tables.sql"
#    - ./gradlew sonarqube -Dsonar.host.url=$SONAR_HOST -Dsonar.login=$SONAR_TOKEN -Dsonar.scm.provider=git -Dsonar.analysis.mode=publish -Dsonar.issuesReport.console.enable=true -Dsonar.verbose=true
#  cache:
#    paths:
#      - $GRADLE_USER_HOME/caches/
#      - $GRADLE_USER_HOME/wrapper/
#      - $GRADLE_USER_HOME/build-cache/

deploy:
  stage: deploy
  image: registry.cn-hangzhou.aliyuncs.com/limaofeng/gradle-alpine
  cache:
    paths:
    - $GRADLE_USER_HOME/caches/
    - $GRADLE_USER_HOME/wrapper/
    - $GRADLE_USER_HOME/build-cache/
  variables:
    GRADLE_USER_HOME: /cache/.gradle
  script:
    - gradle clean testClasses upload -x test
  only:
    - tags