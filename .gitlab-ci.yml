stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    - gradle clean classes -x test
  tags:
    - shell

#test:
#  stage: test
#  script:
#    - export SONAR_OPTS="-Dsonar.gitlab.project_id=${CI_PROJECT_ID} -Dsonar.gitlab.commit_sha=${CI_BUILD_REF} -Dsonar.gitlab.ref_name=${CI_BUILD_REF_NAME}"
#    - gradle sonarqube -Dsonar.host.url=$SONAR_HOST -Dsonar.login=$SONAR_TOKEN -Dsonar.scm.provider=git -Dsonar.analysis.mode=preview -Dsonar.issuesReport.console.enable=true -Dsonar.verbose=true $SONAR_OPTS
#  tags:
#    - shell

sonar:
  image: limaofeng/gradle-alpine:mysql
  stage: test
  services:
    - mysql:latest
  variables:
    MYSQL_DATABASE: demo
    MYSQL_ROOT_PASSWORD: 123456
  script:
    - env
    - mysql -h mysql -u root -p123456 < core/database/tables.sql
    - gradle clean build -x test
#    - gradle sonarqube -Dsonar.host.url=$SONAR_HOST -Dsonar.login=$SONAR_TOKEN -Dsonar.scm.provider=git -Dsonar.analysis.mode=publish -Dsonar.issuesReport.console.enable=true -Dsonar.verbose=true
#  only:
#    - tags
  cache:
    paths:
      - ~/.gradle
  tags:
    - docker

deploy:
  stage: deploy
  script:
    - gradle clean testClasses upload -x test
  only:
    - tags
  tags:
    - shell