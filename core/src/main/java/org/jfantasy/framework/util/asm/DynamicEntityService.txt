package com.fantasy.framework.cms.service.impl;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javassist.CannotCompileException;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtField;
import javassist.CtNewMethod;
import javassist.NotFoundException;
import ognl.OgnlException;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.ibatis.plugin.Plugin;

import com.fantasy.framework.cms.bean.Article;
import com.fantasy.framework.cms.bean.Attribute;
import com.fantasy.framework.cms.bean.AttributeValue;
import com.fantasy.framework.cms.bean.Category;
import com.fantasy.framework.cms.bean.DynamicProperty;
import com.fantasy.framework.cms.bean.enums.DataType;
import com.fantasy.framework.cms.dao.CategoryDao;
import com.fantasy.framework.cms.dao.PluginDao;
import com.fantasy.framework.util.FantasyClassLoader;
import com.fantasy.framework.util.common.BeanUtil;
import com.fantasy.framework.util.common.ClassUtil;
import com.fantasy.framework.util.common.PathUtil;
import com.fantasy.framework.util.ognl.OgnlUtil;

public class DynamicEntityService {

	private final Log log = LogFactory.getLog(DynamicEntityService.class);

	private PluginDao pluginDao;
	private CategoryDao categoryDao;

	public void initPlugin() {
		List<DynamicClass> plugins = this.getPluginAll();
		for (DynamicClass plugin : plugins) {
			makeClass(plugin);
		}
	}

	private void makeClass(DynamicClass plugin) {
		log.debug("开始生成类:" + plugin.getJavaclass());
		ClassPool pool = ClassPool.getDefault();
		try {
			CtClass destclass = pool.makeClass(plugin.getJavaclass(), pool.get(plugin.getOrigClass()));
			for (Attribute property : plugin.getAttributes()) {
				try {
					CtField cf = destclass.getField(property.getCode());
					destclass.removeField(destclass.getField(property.getCode()));
					destclass.removeMethod(destclass.getDeclaredMethod("get" + StringUtils.capitalize(property.getCode())));
					destclass.removeMethod(destclass.getDeclaredMethod("set" + StringUtils.capitalize(property.getCode()), new CtClass[] { cf.getType() }));
				} catch (NotFoundException e) {
					log.debug("类" + plugin.getJavaclass() + "没有" + property.getCode() + "字段");
				}
				destclass.addField(CtField.make("private java.lang.String ".concat(property.getCode()).concat(";"), destclass));
				destclass.addMethod(CtNewMethod.setter("set" + StringUtils.capitalize(property.getCode()), destclass.getField(property.getCode())));
				destclass.addMethod(CtNewMethod.getter("get" + StringUtils.capitalize(property.getCode()), destclass.getField(property.getCode())));
			}
			destclass.writeFile(PathUtil.getWebClassesPath());
			destclass.detach();
		} catch (NotFoundException e) {
			log.error(e.getMessage(), e);
		} catch (CannotCompileException e) {
			log.error(e.getMessage(), e);
		} catch (IOException e) {
			log.error(e.getMessage(), e);
		}
	}

	private List<DynamicClass> getPluginAll() {
		DynamicClass plugin = new DynamicClass();
		plugin.setId(1L);
		plugin.setOrigClass(Article.class.getName());
		plugin.setJavaclass(plugin.getOrigClass().concat("_$fantasy$version$" + plugin.getVersion() + "$").concat(plugin.getId().toString()));
		List<Attribute> list = new ArrayList<Attribute>();
		list.add(getAttribute("属性1", "temp1", DataType.text));
		list.add(getAttribute("属性2", "temp2", DataType.text));
		plugin.setAttributes(list);

		return Arrays.asList(new DynamicClass[] { plugin });

		// return this.pluginDao.getAll();
	}

	public Article getPluginArticle(Article article, String code) {
		try {
			Category category = categoryDao.get(code);
			Article newArticle = (Article) ClassUtil.newInstance(FantasyClassLoader.getClassLoader().loadClass(category.getExpand().getDynamicAttribute().getJavaclass()));
			newArticle = BeanUtil.copy(newArticle, article);
			for (Map.Entry<String, AttributeValue> pv : article.getAttributeValues().entrySet()) {
				try {
					OgnlUtil.getInstance().setValue(pv.getKey(), newArticle, pv.getValue().getValue());
				} catch (OgnlException e) {
					log.error("OGNL赋值出现异常:", e);
				}
			}
			return newArticle;
		} catch (ClassNotFoundException e) {
			throw new RuntimeException(e);
		}
	}

	public Plugin getPluginByClassName(String name) {
		return null;
	}

	public Plugin getPluginById(Long id) {
		return null;
	}

	public Plugin getPluginDetails(Long id) {
		return null;
	}

	public Attribute getPropertyByCode(Long pluginId, String code) {
		return null;
	}

	public Attribute getPropertyById(Long id) {
		return null;
	}

	public HashMap<String, Object> getPropertyValueByArticleId(Long articleId) {
		return null;
	}

	public Object getPropertyValueByArticleId(Long articleId, Long propertyId) {
		return null;
	}

	public Object getPropertyValueByArticleId(Long articleId, String propertyCode) {
		return null;
	}

	public Object getPropertyValueById(Long id) {
		return null;
	}

	public void importTemple(String html) {

	}

	public Article savePropertyValue(Article article) {
		return null;
	}

	public static void main(String[] args) throws NotFoundException, ClassNotFoundException, CannotCompileException, IOException, OgnlException {
		PluginService pluginService = new PluginService();

		pluginService.initPlugin();

		List<DynamicClass> s = pluginService.getPluginAll();

		Article article = (Article) ClassUtil.newInstance(s.get(0).getJavaclass());
		for (Attribute p : s.get(0).getAttributes()) {
			OgnlUtil.getInstance().setValue(p.getCode(), article, "123456");
		}

		for (Field f : article.getClass().getSuperclass().getDeclaredFields()) {
			System.out.println(f.getName() + "=" + OgnlUtil.getInstance().getValue(f.getName(), article));
		}
		for (Field f : article.getClass().getDeclaredFields()) {
			System.out.println(f.getName() + "=" + OgnlUtil.getInstance().getValue(f.getName(), article));
		}

		System.out.println(article);

		/*
		 * Plugin plugin = new Plugin(); plugin.setId(1L); List<Property> list = new ArrayList<Property>(); list.add(getProperty("属性1", "temp1", DataType.text)); list.add(getProperty("属性2", "temp2", DataType.text)); plugin.setProperties(list);
		 * 
		 * List<Property> properties = plugin.getProperties();
		 * 
		 * // 测试步骤
		 * 
		 * // 1.修改类 System.out.println("1.修改类"); String classname = "com.fantasy.framework.cms.bean.Article"; String newclassname = classname.concat("$").concat(plugin.getId().toString());
		 * 
		 * ClassPool pool = ClassPool.getDefault(); CtClass sp = pool.makeClass(newclassname, pool.get(classname)); System.out.println("添加:xmove方法"); CtMethod m = CtNewMethod.make("public int xmove() { int x = 5; return x;}", sp); sp.addMethod(m);
		 * 
		 * System.out.println("写到文件"); sp.writeFile(PathUtil.getWebClassesPath()); sp.detach();
		 * 
		 * // 2.默认加载器加载该类 System.out.println("\n\n2.默认加载器加载该类"); ClassLoader.getSystemClassLoader().loadClass(classname); Class class1 = ClassLoader.getSystemClassLoader().loadClass(newclassname); System.out.println("class信息:" + class1.getName()); System.out.println("class的方法:"); for (Method mt : class1.getDeclaredMethods()) { System.out.println(mt); }
		 * 
		 * // 3.动态加载器加载该类 // 3.1.默认加载方法 1号版本 // 3.2.从文件加载 1号版本 System.out.println("\n\n3.动态加载器加载该类"); System.out.println("3.1.默认加载方法"); Class newClass1 = FantasyClassLoader.loadClass(newclassname); System.out.println("class信息:" + newClass1.getName()); System.out.println("class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); } System.out.println("\n3.2.从文件加载"); newClass1 = FantasyClassLoader.loadClass(PathUtil.getWebClassesPath(), newclassname); System.out.println("class信息:" + newClass1.getName()); System.out.println("class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); }
		 * 
		 * // 4.修改类 System.out.println("\n\n4.修改类"); System.out.println("添加:x4move方法"); sp = pool.get(newclassname); m = CtNewMethod.make("public int x4move() { int x = 5; return x;}", sp); sp.addMethod(m); System.out.println("写到文件"); sp.writeFile(PathUtil.getWebClassesPath()); sp.detach();
		 * 
		 * // 5.重新实例化加载器 // 5.1.默认加载方法 1号版本 // 5.2.从文件加载 4号版本 System.out.println("\n\n5.重新实例化加载器"); System.out.println("5.1.默认加载方法"); newClass1 = FantasyClassLoader.loadClass(newclassname); System.out.println("class信息:" + newClass1.getName()); System.out.println("class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); } System.out.println("\n5.2.从文件加载"); newClass1 = FantasyClassLoader.loadClass(PathUtil.getWebClassesPath(), newclassname); System.out.println("class信息:" + newClass1.getName()); System.out.println("class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); }
		 * 
		 * // 6.修改类 System.out.println("\n\n6.修改类"); System.out.println("添加:x6move方法"); sp = pool.get(newclassname); m = CtNewMethod.make("public int x6move() { int x = 5; return x;}", sp); sp.addMethod(m); System.out.println("写到文件"); sp.writeFile(PathUtil.getWebClassesPath()); sp.detach();
		 * 
		 * // 7.重新实例化加载器 // 7.1.默认加载方法 4号版本 // 7.2.从文件加载 6号版本 System.out.println("\n\n7.重新实例化加载器"); System.out.println("7.1.默认加载方法"); newClass1 = FantasyClassLoader.loadClass(newclassname); System.out.println("class信息:" + newClass1.getName()); System.out.println("class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); } System.out.println("\n7.2.从文件加载"); newClass1 = FantasyClassLoader.loadClass(PathUtil.getWebClassesPath(), newclassname); System.out.println("class信息:" + newClass1.getName()); System.out.println("class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); }
		 */
		// 期望效果 默认加载方法不是调用 jvm 的 loadclass方法 如果是,修改loadclass方法

		// CtClass对象将从ClassPool中移除.

		/*
		 * 
		 * 
		 * System.out.println("\n创建动态类加载器");
		 * 
		 * 
		 * 
		 * newClass1 = DynamicClassLoader.class.getClassLoader().loadClass(newclassname); System.out.println("\n\n默认加载器中的信息"); System.out.println("新class信息:" + newClass1.getName()); System.out.println("新class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); }
		 * 
		 * System.out.println("重新修改类,添加nxmove方法"); sp = pool.get(newclassname); // Defrost()执行后，CtClass对象将可以再次修改 // sp.defrost();
		 * 
		 * // 类中新增一个新的方法 CtMethod nm = CtNewMethod.make("public int nxmove() { int x = 5; return x;}", sp); // CtNewMethod.make(CtClass.intType, "nxmove",new // CtClass[]{CtClass.intType},new CtClass[]{CtClass.intType}, "", sp);
		 * 
		 * sp.addMethod(nm);
		 * 
		 * sp.writeFile(PathUtil.getWebClassesPath());
		 * 
		 * System.out.println("----------------------------------------");
		 * 
		 * newClass1 = classLoader.loadClass(newclassname); System.out.println("\n\n原DynamicClassLoader中的信息"); System.out.println("新class信息:" + newClass1.getName()); System.out.println("新class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); }
		 * 
		 * System.out.println("\n\n创建新的DynamicClassLoader"); // classLoader = new DynamicClassLoader(classLoader); newClass1 = classLoader.loadClass(PathUtil.getWebClassesPath(), newclassname); System.out.println("重新加载DynamicClassLoader中的信息"); System.out.println("新class信息:" + newClass1.getName()); System.out.println("新class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); }
		 * 
		 * newClass1 = DynamicClassLoader.class.getClassLoader().loadClass(newclassname); System.out.println("\n\n默认加载器中的信息"); System.out.println("新class信息:" + newClass1.getName()); System.out.println("新class的方法:"); for (Method mt : newClass1.getDeclaredMethods()) { System.out.println(mt); }
		 */
		/*
		 * CtMethod ctMethod = new CtMethod(CtClass.intType, "add1", new CtClass[] { CtClass.intType, CtClass.intType }, sp); ctMethod.setBody("return $1 + $2;"); ctMethod.insertAfter("for(int i=0;i<$args.length;i++)" + "{System.out.println(\"args[\"+i+\"]=\"+$args[i]);}");
		 */

		// CtField.make("",sp);
		// CtField ctField = new CtField(type, name, declaring)
		// sp.addField(f, init)
	}

	private static Attribute getAttribute(String name, String code, DataType dataType) {
		Attribute p = new Attribute();
		p.setName(name);
		p.setCode(code);
		p.setDataType(dataType);
		return p;
	}

	public void initEntity(DynamicProperty dynamicProperty) {
		
	}

}
